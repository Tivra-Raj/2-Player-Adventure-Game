#include<bits/stdc++.h>
using namespace std;

void GameMenu();
void Gameplay();
void Restart();
void DisplayPlayerTypes();

enum class Type {Character, MartialArtist, Ninja, Saiyan};    //Player type (1,2,3)

template <class Rep, class Period>
void sleep_for(const chrono::duration<Rep,Period>& rel_time);

class Character                  //Base class
{
	protected :

	int temp_health, Heal, Additional_damage;
	string PlayerType;

	public :
	
	int max_health, base_damage, Special_ability;

	Character(int health, int damage, int Add_damage, int spl_ability, int heal, string playerType)
	{
	    max_health = health;
	    temp_health = health;
	    base_damage = damage;
	    Additional_damage = Add_damage;
	    Special_ability = spl_ability;
	    Heal = heal;
	    PlayerType = playerType;
	}
	
	virtual int TakeAdditionalDamage() = 0;
	virtual void Regeneration() = 0;
	virtual Type type() = 0;
	virtual string DisplayPlayerType() = 0;
	virtual void DamageMessage() = 0;
	virtual void SpecialabilityMessage() = 0;

	int TakeDamage(int base_damage , int Additional_damage)
	{
	    int Total_Damage = base_damage + Additional_damage;
	    cout<<" Additional Damage given : "<<Additional_damage<<endl;
	    cout<<" Total Damage Dealt : "<<Total_Damage;
	    temp_health = temp_health - Total_Damage;
	    
	    if(temp_health < 0)
	    temp_health = 0;
	    
	    return Total_Damage;
	}

	int TakeSpecailAbility(int Special_ability)
	{
	    cout<<endl<<" Special Damage Dealt : "<<Special_ability<<endl;
	    temp_health = temp_health - Special_ability;
	    
	    if(temp_health < 0)
	    temp_health = 0;

	    return Special_ability;
	}
	
	int getHealth()
	{
	    return temp_health;
	}
};

class MartialArtist : public Character           //Martial Artist class
{
	public : 

	MartialArtist(int health, int damage, int Add_damage, int spl_ability, int heal, string playerType) : Character( health,  damage,  Add_damage,  spl_ability,  heal, playerType){}
	
	int TakeAdditionalDamage ()
	{
	    int Additional_damage = 20 + rand () % 21;  //20-40
	    return Additional_damage;
	}
	
  void Regeneration()
	{
		if(temp_health == max_health)
		{
			cout<<" Player can't increase his health, otherwise he will burst."<<endl;
		}

		if(temp_health < max_health)
		{	
		    Heal = 15 + rand() % 16;     //15-30
        cout<<" Taiyi Green Wood Mark Healing Art!!! Heeeaaal"<<endl<<endl;
		    cout<<" Health Regenerated by : "<<Heal<<endl;
		    int updatedHealth = temp_health + Heal;
			  temp_health = updatedHealth > max_health ? max_health : updatedHealth;
			  cout<<" After Regeneration Health is : "<<temp_health<<endl;
		}
	}
	
	void DamageMessage()
	{
    int randmessage = rand() % 3;
    if(randmessage == 1)
	    cout<<endl<<" Take My 99 Heaven Spirit Sword Attack, Hyaaaaaaaaa!"<<endl;
	  else if(randmessage == 0)
	    cout<<endl<<" Spirit Sword transform..... Take this Soul Sword Attack!!!"<<endl;
	  else if(randmessage == 2)
	    cout<<endl<<" Activating Mysterious Sacred Spirit Technique, Myraid Body Attaaaaack...."<<endl;
	}
	
	void SpecialabilityMessage()
	{
	    cout<<"⚡ Calling Special ability  ⚡"<<endl;
	    cout<<" Aaaaaaaaaa... Sacred Heaven Forbidden Seal!!!! Heavenly Dragon Golden Bell Attaaaaack....."<<endl;
	}
	
  Type type() 
  {
    return Type::MartialArtist;
  }
    
	string DisplayPlayerType()
	{
		return PlayerType;
	}
};

class Ninja : public Character               //Ninja Class
{
	public :
	
	Ninja(int health, int damage, int Add_damage, int spl_ability, int heal, string playerType) : Character( health,  damage,  Add_damage,  spl_ability,  heal, playerType){}
	
	int TakeAdditionalDamage ()
	{
	    int Additional_damage = 70 + rand () % 31;  //70-100
	    return Additional_damage;
	}
	
  void Regeneration()
	{
		if(temp_health == max_health)
		{
			cout<<" Player can't increase his health, otherwise he will burst."<<endl;
		}

		if(temp_health < max_health)
		{	
		    Heal = 30 + rand() % 21;       //30-50
		    cout<<" Medical Ninjutsu!!...Yin Healing Wound Destruction.."<<endl<<endl;
		    cout<<" Health Regenerated by : "<<Heal<<endl;
		    int updatedHealth = temp_health + Heal;
			  temp_health = updatedHealth > max_health ? max_health : updatedHealth;
			  cout<<" After Regeneration Health is : "<<temp_health<<endl;
		}
	}
	
	void DamageMessage()
	{
    int randmessage = rand() % 3;
    if(randmessage == 1)
	    cout<<endl<<" Everlasting Phantom!!!!! Destroying Fang Gooo......."<<endl;
	  else if(randmessage == 0)
	    cout<<endl<<" Body Transform....Wild Boa Hurting Cloud! Attaaaaack......"<<endl;
	  else if(randmessage == 2)
	    cout<<endl<<" Activating Execution Hurl! Descend Rotten Armageddon Hit Impact....."<<endl;
	}
	
	void SpecialabilityMessage()
	{
	    cout<<"⚡ Calling Special ability  ⚡"<<endl;
	    cout<<" Scathing Bane Shot!!!!! 56 shuriken Technique Goooooo........."<<endl;
	}
	
  Type type() 
  {
    return Type::Ninja;
  }
    
	string DisplayPlayerType()
	{
		return PlayerType;
	}
};

class Saiyan : public Character                         //Saiyan class
{
	public :
	
	Saiyan(int health, int damage, int Add_damage, int spl_ability, int heal, string playerType) : Character( health,  damage,  Add_damage,  spl_ability,  heal, playerType){}
	
	int TakeAdditionalDamage ()
	{
	    int Additional_damage = 25 + rand () % 16;  //70-100
	    return Additional_damage;
	}
	
  void Regeneration()
	{
		if(temp_health == max_health)
		{
			cout<<" Player can't increase his health, otherwise he will burst."<<endl;
		}

		if(temp_health < max_health)
		{	
		    Heal = 80 + rand() % 21;
		    cout<<" Senzu bean(yum nom nom chomp chomp)!!! Heeeaaal"<<endl<<endl;
		    cout<<" Health Regenerated by : "<<Heal<<endl;
		    int updatedHealth = temp_health + Heal;
			  temp_health = updatedHealth > max_health ? max_health : updatedHealth;
			  cout<<" After Regeneration Health is : "<<temp_health<<endl;;
		}
	}

	string DisplayPlayerType()
	{
		return PlayerType;
	}
	
	Type type()  
	{
    return Type::Saiyan;
  }  
    
    void DamageMessage()
	{
    int randmessage = rand() % 3;
    if(randmessage == 1)
	    cout<<endl<<" Infinite Ki Blast!!! Try to Defend This 100 invi Dragon ki fist. "<<endl;
	  else if(randmessage == 0)
	    cout<<endl<<" Kaioken x10 Activate !!! Kaioken Attack Solar Flare........ "<<endl;
	  else if(randmessage == 2)
	    cout<<endl<<" AaaaaaaaaaaHaaa!!! Super Saiyan....Super Dragon Fist....Hyaaaaaaaaa....... "<<endl;
	}
	
	void SpecialabilityMessage()
	{
	    cout<<"⚡ Calling Special ability  ⚡"<<endl;
	    cout<<" Kaaaaaa Meeeeeee Haaaaaaaa Meeeeee Haaaaaaaaaaaaaaa.............."<<endl;
	}
};

void GameMenu()   //To display Game Menu
{
	char menuchoice;
  this_thread::sleep_for(chrono::milliseconds(900));
  system("clear");
  system("cls");

	cout<<"**************************************************************************************************"<<endl;
	cout<<"*                   Welcome To Rising Heroes - Two Player Battle Adventure                       *"<<endl;
	cout<<"*                  --------------------------------------------------------                      *"<<endl;
	cout<<"*  Rules :                                                                                       *"<<endl;
	cout<<"*  1. Each Player have only one chance at a time                                                 *"<<endl;
	cout<<"*  2. Each Player has different Damage, Heal Ability, Additional damage and Special Ability      *"<<endl;
	cout<<"*  NOTE : Each Special Ability has 20% posibility                                                *"<<endl;
	cout<<"*  3. The player whose Health reach below 0, will die and loose the game                         *"<<endl;
	cout<<"*  4. Player can have two options in its turn, either to damage other player or to heal youself  *"<<endl;
	cout<<"*  5. Press H to heal and A to Attack!                                                           *"<<endl;
	cout<<"*                                                                                                *"<<endl;
	cout<<"*------------------------------------------------------------------------------------------------*"<<endl;
	cout<<"*  Press '1' to start the Game                                                                   *"<<endl;
	cout<<"*  Press '2' to exit the Game                                                                    *"<<endl;
	cout<<"**************************************************************************************************"<<endl;

	cout<<" Enter your choice : ";
	cin>>menuchoice;

	if(menuchoice == '1')
	{
		system("clear");
	    system("cls");
	    DisplayPlayerTypes();
	}
	else if(menuchoice == '2')
	{
	    exit(0);
	}
	else
	{
	    cout<<" Wrong Option! Please choose correct option "<<endl<<endl;
	    GameMenu();
	}
}

void DisplayPlayerTypes()    //To Display different player available in game
{
    cout<<"***********************************************************************************************"<<endl;
    cout<<"*                                    CHARACTER SELECTION                                      *"<<endl;
    cout<<"***********************************************************************************************"<<endl<<endl;
    
    cout<<" --------------------------------------------------------------------------------------------- "<<endl;
    cout<<"|      Martial Artisit         |            Ninja             |             Saiyan            |"<<endl;
    cout<<"|    ------------------        |          ---------           |           ----------          |"<<endl;
    cout<<"| Martial Artisit profound     | Ninja have low damage with   | Saiyan are expert in combat   |"<<endl;
    cout<<"| in Dealing high damage and   | regular health,but range     | with tremendous damage which  |"<<endl;
    cout<<"| have health of a mountain,   | ability provide him with     | leads to low health,but no one|"<<endl;
    cout<<"| leaving in low regeneration. | high Additional Damage       | know how they have massive    |"<<endl;
    cout<<"|                              | leaving with regular healing.| amount of regeneration        |"<<endl;
    cout<<"|                              |                              |                               |"<<endl;
    cout<<"| DPH           - 50           | DPH           - 30           | DPH           - 100           |"<<endl;
    cout<<"| Health        - 500          | Health        - 250          | Health        - 200           |"<<endl;
    cout<<"| Add. Damage   - 20 - 40      | Add. Damage   - 70 - 100     | Add. Damage   - 25 - 40       |"<<endl;
    cout<<"| Spl. Ability  - Total Domain | Spl. Ability  - jujutsu      | Spl Ability   - Energy ball   |"<<endl;
    cout<<"| Heal capacity - 15 - 30      | Heal capacity - 30 - 50      | Heal capacity - 80 - 100      |"<<endl;
    cout<<"|                              |                              |                               |"<<endl;
    cout<<" --------------------------------------------------------------------------------------------- "<<endl;
    cout<<" *DPH(Damage per hit), Add. Damage(Additional Damage), Spl. Ability(Special Ability)      "<<endl<<endl;

    Gameplay();
}

Character *SelectPlayers(int playerNum)              //To Select Player
{
	char SelectPlayer;
	Character *Player;

	cout<<" Player "<<playerNum<<" : Choose your character(press 1 for Martial Artist, 2 for Ninja and 3 for Saiyan) : ";
  cin>>SelectPlayer;

  switch(SelectPlayer)
  {
    case '1' :  Player = new MartialArtist(500,50,0,200,0,"Martial Artist");
        		    break;

   	case '2' :  Player = new Ninja(250,30,0,130,0,"Ninja");
  	        	  break;

  	case '3' :  Player = new Saiyan(200,100,0,300,0,"Saiyan");
   	    		    break;
    	    		
  	default :   cout<<endl<<" Please Select Character Which are Available in Character List"<<endl<<endl;
          	    Player = SelectPlayers(playerNum);
          	    break;
  }
return Player;
}

void DisplayBeginBattle()                        //Display Screen
{
	cout<<endl<<endl<<" ..................LOADING.................."<<endl;

	this_thread::sleep_for(chrono::milliseconds(3000));

	system("clear");
	system("cls");
	cout<<endl<<" \t\t\t\t   ⚔️  Lets Begin The Battle ⚔️ ";
	cout<<endl<<" \t\t\t\t     -----------------------  "<<endl;	
}

void Gameplay()                                          //Logic Behind The Game Play
{
	Character *Player1 , *Player2;
	string Name1,Name2;
	
	cout<<" Player 1 : Enter your Name : ";
	cin>>Name1;
  Player1 = SelectPlayers(1);
  cout<<endl<<" Player 2 : Enter your Name : ";
	cin>>Name2;
	while(Name1 == Name2)
    {
        cout<<endl<<" Player 2 and player 1 Name cannot be Same "<<endl<<endl;
        cout<<" Player 2 : Enter your Name : ";
	      cin>>Name2;
    }
    Player2 = SelectPlayers(2);

    while(Player1->type() == Player2->type())
    {
        cout<<endl<<" Player 2 and player 1 Character cannot be of same type"<<endl<<endl;
        Player2 = SelectPlayers(2);
    }
	
    DisplayBeginBattle();

    int flag = 1;

    while(Player1->getHealth() > 0 && Player2->getHealth() > 0)
    {
        if(flag == 1)
        {
            char choice;
            cout<<endl<<" UserName : "<<Name1<<" \t\t\t\t\t\t\t\tCharacter : "<<Player1->DisplayPlayerType();
            cout<<endl<<" Health❤️  : "<<Player1->max_health<<" \t\t\t\t\t\t\t\tRemaining Health💔 : "<<Player1->getHealth();
            cout<<endl<<"*****************************************************************************"<<endl;
            cout<<endl<<" Player 1 : Press A to Attack Player 2 OR H to Heal yourself : ";
            cin>>choice;
            if(choice == 'a' || choice == 'A' )
            {
                int chance = rand() % 5;
                if(chance == 0)
    			      {
        			    cout<<endl<<" Player 1 ";
        			    Player1->SpecialabilityMessage();
        			    Player2->TakeSpecailAbility(Player1->Special_ability);
        			    cout<<" Health of Player 2 "<<Player2->DisplayPlayerType()<<"("<<Name2<<") after taking damage : "<<Player2->getHealth()<< endl;
                  if(Player2->getHealth() <= 0)
                    cout<<endl<<" Player 2 : "<<Name2<<"( "<<Player2->DisplayPlayerType()<<" ) Died"<<endl;
    			      }
    			      else
    			      {
        			    cout<<endl<<" Player 1 Attacking........";
        			    Player1->DamageMessage();
        			    cout<<endl<<" Damage Per Hit Given : "<<Player1->base_damage<<endl;
        			    Player2->TakeDamage(Player1->base_damage , Player1->TakeAdditionalDamage());
                  cout<<endl<<" Health of Player 2 "<<Player2->DisplayPlayerType()<<"("<<Name2<<") after taking damage : "<<Player2->getHealth()<< endl;
                  if(Player2->getHealth() <= 0)
                    cout<<endl<<" Player 2 : "<<Name2<<"( "<<Player2->DisplayPlayerType()<<" ) Died"<<endl;
    			      }
            }
            else if(choice == 'h' || choice == 'H' )
            {
              cout<<endl<<" Player 1 Healing........"<<endl;  
              Player1->Regeneration(); 
            }
            else
            {
                cout<<endl<<" You Can't Perform Any other Activies than Attack and Heal."<<endl;
                continue;
            }
            flag++;
            cout<<"-----------------------------------------------------------------------------"<<endl;
        }
        else if(flag == 2)
        {
            char choice;
            cout<<endl<<endl<<" UserName : "<<Name2<<" \t\t\t\t\t\t\t\tCharacter : "<<Player2->DisplayPlayerType();
            cout<<endl<<" Health❤️  : "<<Player2->max_health<<" \t\t\t\t\t\t\t\tRemaining Health💔 : "<<Player2->getHealth();
            cout<<endl<<"*****************************************************************************"<<endl;
            cout<<endl<<" Player 2 : Press A to Attack Player 1 OR H to Heal yourself : ";
            cin>>choice;
            if(choice == 'a' || choice == 'A' )
            {
                int chance = rand() % 5;
                if(chance == 0)
    			      {
        			    cout<<endl<<" Player 2 ";
        			    Player2->SpecialabilityMessage();
        			    Player1->TakeSpecailAbility(Player2->Special_ability);
        			    cout<<" Health of Player 1 "<<Player1->DisplayPlayerType()<<"("<<Name1<<") after taking damage : "<<Player1->getHealth()<< endl;
                  if(Player1->getHealth() <= 0)
                    cout<<endl<<" Player 1 : "<<Name1<<"( "<<Player2->DisplayPlayerType()<<" ) Died"<<endl;
    			      }
    			      else
    			      {
        			    cout<<endl<<" Player 2 Attacking........";
        			    Player2->DamageMessage();
        			    cout<<endl<<" Damage Per Hit Given : "<<Player2->base_damage<<endl;
        			    Player1->TakeDamage(Player2->base_damage , Player2->TakeAdditionalDamage());
                  cout<<endl<<" Health of Player 1 "<<Player1->DisplayPlayerType()<<"("<<Name1<<") after taking damage : "<<Player1->getHealth()<< endl;
                  if(Player1->getHealth() <= 0)
                    cout<<endl<<" Player 1 : "<<Name1<<"( "<<Player1->DisplayPlayerType()<<" ) Died"<<endl;
    			      }
            }
            else if(choice == 'h' || choice == 'H' )
            {
              cout<<endl<<" Player 2 Healing........"<<endl;  
              Player2->Regeneration(); 
            }
            else
            {
                cout<<endl<<" You Can't Perform Any other Activies than Attack and Heal."<<endl;
                continue;
            }
            flag = 1;
            cout<<"-----------------------------------------------------------------------------"<<endl;
        }
        
    }

    cout<<endl<<"  GAME OVER"<<endl;
    cout<<" -----------"<<endl;
    cout<<" Woohooo ! That Was a Great Fight between both Player1 and Player 2 "<<endl;
    if(Player1->getHealth() <= 0)
    {
        cout<<endl<<" Player 2 : "<<Name2<<"( "<<Player2->DisplayPlayerType()<<" ) Won the Battle"<<endl;
        cout<<endl<<" Good Fight by Player 1, Come Back More Prepared In Next Game "<<Name1<<"( "<<Player1->DisplayPlayerType()<<" )."<<endl;
    }
    else
    {
        cout<<endl<<" Player 1 : "<<Name1<<"( "<<Player1->DisplayPlayerType()<<" ) Won the Battle";
        cout<<endl<<" Good Fight by Player 2, Come Back More Prepared In Next Game "<<Name2<<"( "<<Player2->DisplayPlayerType()<<" )."<<endl;
    }
  Restart();
}

void Restart()                        //To Restart The Game Again
{
    char restart;
    cout<<endl<<endl<<" To Restart Game press 1 or press 2 to exit : ";
    cin>>restart;
    if(restart == '1')
    GameMenu();
    else if(restart == '2')
    exit(0);
    else
    {
    	cout<<" Wrong Option! Please choose correct option";
    	Restart();
    }
}

int main()                     //Main Function
{
	srand(time(0));
	GameMenu();

	return 0;
};